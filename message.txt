import java.util.*; 

import java.util.*;  
class DLL{ // Doubly Linked List in Java
    Node head, tail;
    class Node{ 
        int data;
        Node next, prev;
        Node(int v) { this.data = v; }
    } 
    void push(int v){
        Node n = new Node(v);
        if(head == null) tail = n;
        if(head != null) head.prev = n;
        n.next = head;
        head = n;
    }
    void append(int v){
        if(head == null) { push(v); return; }
        Node n = new Node(v);
        tail.next = n; n.prev = tail;
        tail = n;
    }
    void insertAfter(int a, int b){ // insert b after a
        if(head == null) return;
        Node tmp = head;
        while(tmp != null){ // searching for a
            if(tmp.data == a) break;
            tmp = tmp.next;
        } if(tmp == null) return;//if a isnt found
        if(tmp == tail) { append(b); return; }
        Node n = new Node(b); 
        n.next = tmp.next; tmp.next.prev = n;
        n.prev = tmp; tmp.next = n;
    } // 56<->88(tmp)<->3(n)<->99(tmp.next)<->56 | insert 3 after 88
    void insertBefore(int a, int b){// insert b before a
        if(head == null) return;
        if(head.data == a) { push(b); return; } // if head is a, push
        Node tmp = head;
        while(tmp != null){ // searching for a
            if(tmp.data == a) break;
            tmp = tmp.next;
        } if(tmp == null) return;//if a isnt found
        Node n = new Node(b);
        tmp.prev.next = n; n.prev = tmp.prev;
        n.next = tmp; tmp.prev = n;
    }// 56(tmp.prev)<->3(n)->88(tmp)<->99(tmp.next)<->56 | insert 3 before 88
    void printDLL(){
        System.out.print("Head->Tail: ");
        for(Node tmp=head; tmp != null; tmp = tmp.next) 
            System.out.print(tmp.data + " ");
        System.out.print("\nTail->Head: ");
        for(Node tmp=tail; tmp != null; tmp = tmp.prev) 
            System.out.print(tmp.data + " ");
        System.out.println();
    }
} 

public class Solution {
    public static void main(String args[] ) throws Exception {
        Scanner sc = new Scanner(System.in);
        DLL o = new DLL();
        int n = sc.nextInt();
        for(int i=0;i<n;i++){
            int c = sc.nextInt();
            switch(c){
                case 1 : { o.push(sc.nextInt()); } break;
                case 2 : { o.append(sc.nextInt()); } break; 
                case 3 : { o.insertAfter(sc.nextInt(), sc.nextInt()); } break;
                case 4 : { o.insertBefore(sc.nextInt(), sc.nextInt()); } break;
            }
        } 
        o.printDLL();
    }
}